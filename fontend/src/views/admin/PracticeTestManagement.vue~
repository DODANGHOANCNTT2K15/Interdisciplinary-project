<script setup>
import { ref, onMounted } from 'vue';
import axios from 'axios';

// Reactive states
const modalVisible = ref(false);
const modalTitle = ref('Thêm mới Exam');
const idExam = ref(null);
const nameBaiThiThu = ref('');
const infoSuccess = ref('');
const exams = ref([]);
const fileExcel = ref(null);
const fileImage = ref(null);
const fileImageQuestions = ref([]);
const fileListening = ref([]);
const practicetestlevel = ref('');
const filterLevel = ref('');

// Load all exams
const loadAllBaiThiThu = async () => {
  try {
    const response = await axios.get('http://localhost:8080/api/admin/practicetest/loadpracticetest');
    exams.value = response.data.map(test => ({
      ...test,
      practicetestimage: `http://localhost:8080${test.practicetestimage}`
    }));
  } catch (error) {
    console.error('Error loading exams:', error);
  }
};

// Form submit handler
const handleFormSubmit = async () => {
  const formData = new FormData();
  formData.append('name', nameBaiThiThu.value);
  formData.append('file_excel', fileExcel.value);
  formData.append('file_image', fileImage.value);
  formData.append('practicetestlevel', practicetestlevel.value);

  fileImageQuestions.value.forEach(file => {
    formData.append('file_image_question', file);
  });

  Array.from(fileListening.value).forEach(file => {
    formData.append('file_listening', file);
  });

  try {
    if (idExam.value) {
      formData.append('idExam', idExam.value);
      await axios.post('http://localhost:8080/api/admin/practicetest/save', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      infoSuccess.value = 'Cập nhật bài thi thử thành công';
    } else {
      await axios.post('http://localhost:8080/api/admin/practicetest/save', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      infoSuccess.value = 'Thêm mới bài thi thử thành công';
    }
    modalVisible.value = false;
    loadAllBaiThiThu();
  } catch (error) {
    console.error('Error:', error);
    infoSuccess.value = 'Có lỗi xảy ra.';
  }
};

// Edit exam
const editExam = async (examId) => {
  modalVisible.value = true;
  modalTitle.value = 'Cập nhật bài thi thử';
  idExam.value = examId;

  try {
    const response = await axios.get(`http://localhost:8080/api/admin/practicetest/infoPracticeTest/${examId}`);
    nameBaiThiThu.value = response.data;
  } catch (error) {
    console.error('Error fetching exam info:', error);
  }
};

// Delete exam
const deleteExam = async (examId) => {
  if (confirm('Bạn muốn xóa bài thi thử này?')) {
    try {
      await axios.post(`http://localhost:8080/api/admin/practicetest/delete/${examId}`);
      infoSuccess.value = 'Xóa bài thi thử thành công';
      loadAllBaiThiThu();
    } catch (error) {
      console.error('Error deleting exam:', error);
      infoSuccess.value = 'Có lỗi xảy ra.';
    }
  }
};

// Modal toggling
const openModal = () => {
  modalVisible.value = true;
  modalTitle.value = 'Thêm mới Exam';
  idExam.value = null;
  nameBaiThiThu.value = '';
  fileExcel.value = null;
  fileImage.value = null;
  fileImageQuestions.value = [];
  fileListening.value = [];
  practicetestlevel.value = '';
};

const closeModal = () => {
  modalVisible.value = false;
};

// Load exams on component mount
onMounted(() => {
  loadAllBaiThiThu();
});
</script>

<template>
  <div class="content" style="margin-left: 15%;">
    <h3>Quản lý bài thi thử Toeic</h3>
    <button class="btn btn-success" @click="openModal">Thêm mới</button>
    <h4 class="info-message">{{ infoSuccess }}</h4>

    <table class="table">
      <thead>
      <tr>
        <th>ID</th>
        <th>Tên bài thi thử</th>
        <th>Ảnh</th>
        <th>Hành động</th>
      </tr>
      </thead>
      <tbody>
      <tr v-for="exam in exams" :key="exam.practicetestid">
        <td style="text-align: center;">{{ exam.practicetestid }}</td>
        <td>{{ exam.practicetestname }}</td>
        <td style="text-align: center;">
          <img :src="exam.practicetestimage" alt="Hình ảnh bài thi" class="image-preview" />
        </td>
        <td style="text-align: center;">
          <button class="btn btn-warning" @click="editExam(exam.practicetestid)">Cập nhật</button>
          <button style="margin-left: 10px;" class="btn btn-danger" @click="deleteExam(exam.practicetestid)">Xóa</button>
        </td>
      </tr>
      </tbody>
    </table>

    <!-- Modal -->
    <div v-if="modalVisible" class="modal">
      <div class="modal-dialog" style="margin-top: 60px">
        <div class="modal-content">
          <div class="modal-header">
            <h4>{{ modalTitle }}</h4>
            <button class="close" @click="closeModal">&times;</button>
          </div>
          <div class="modal-body">
            <div class="form-group">
              <label>Tên bài thi thử</label>
              <input v-model="nameBaiThiThu" type="text" class="form-control" />
            </div>
            <div class="form-group">
              <label>Cấp độ: </label>
              <select v-model="practicetestlevel" class="form-control">
                <option value="350">350</option>
                <option value="550">550</option>
                <option value="750">750</option>
                <option value="900">900</option>
                <option value="955">955</option>
                <option value="990">990</option>
                <option value="990">990+</option>
              </select>
            </div>
            <div class="form-group">
              <label>Ảnh bài thi thử</label>
              <input type="file" @change="fileImage = $event.target.files[0]" class="form-control" />
            </div>
            <div class="form-group">
              <label>File nội dung (Excel)</label>
              <input type="file" @change="fileExcel = $event.target.files[0]" class="form-control" />
            </div>
            <div class="form-group">
              <label>File ảnh câu hỏi</label>
              <input type="file" @change="fileImageQuestions = Array.from($event.target.files)" multiple class="form-control" />
            </div>
            <div class="form-group">
              <label>File nghe câu hỏi</label>
              <input type="file" @change="fileListening = Array.from($event.target.files)" multiple class="form-control" />
            </div>
          </div>
          <div class="modal-footer">
            <button class="btn btn-secondary" @click="closeModal">Đóng</button>
            <button class="btn btn-primary" @click="handleFormSubmit">Xác nhận</button>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped>
/* Tổng thể */
body {
  font-family: 'Arial', sans-serif;
  background-color: #f8f9fa;
  color: #333;
}

/* Nội dung chính */
.content {
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
}

/* Tiêu đề */
h3 {
  font-size: 24px;
  color: #4a90e2;
  border-bottom: 2px solid #ddd;
  padding-bottom: 10px;
}

h4.info-message {
  color: #28a745;
  margin-top: 10px;
  font-size: 16px;
}

/* Button chính */
.btn {
  padding: 10px 15px;
  font-size: 14px;
  border-radius: 5px;
  transition: all 0.3s ease;
  cursor: pointer;
}

.btn-success {
  background-color: #28a745;
  color: #fff;
  border: none;
}

.btn-success:hover {
  background-color: #218838;
}

.btn-warning {
  background-color: #ffc107;
  color: #fff;
  border: none;
}

.btn-warning:hover {
  background-color: #e0a800;
}

.btn-danger {
  background-color: #dc3545;
  color: #fff;
  border: none;
}

.btn-danger:hover {
  background-color: #c82333;
}

.btn-primary {
  background-color: #007bff;
  color: white;
  border: none;
}

.btn-primary:hover {
  background-color: #0056b3;
}

.btn-secondary {
  background-color: #6c757d;
  color: white;
  border: none;
}

.btn-secondary:hover {
  background-color: #5a6268;
}

/* Bảng dữ liệu */
.table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.table th,
.table td {
  border: 1px solid #ddd;
  padding: 10px 15px;
  text-align: center;
}

.table th {
  background-color: #007bff;
  color: white;
  font-weight: bold;
}

.table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.table tr:hover {
  background-color: #e9ecef;
}

.image-preview {
  max-width: 80px;
  max-height: 80px;
  object-fit: cover;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Modal */
.modal {
  display: flex;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 1050;
}

.modal-dialog {
  background: #fff;
  border-radius: 8px;
  width: 600px;
  padding: 20px;
  box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
  animation: scaleIn 0.3s ease-in-out;
}

@keyframes scaleIn {
  from {
    transform: scale(0.8);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #ddd;
  padding-bottom: 10px;
  margin-bottom: 20px;
}

.modal-header h4 {
  font-size: 18px;
  color: #333;
}

.modal-header .close {
  font-size: 20px;
  background: none;
  border: none;
  color: #999;
  cursor: pointer;
}

.modal-header .close:hover {
  color: #000;
}

.modal-body .form-group {
  margin-bottom: 15px;
}

.modal-body label {
  font-weight: bold;
  color: #333;
}

.modal-body input[type="file"],
.modal-body input[type="text"] {
  display: block;
  width: 100%;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 5px;
  margin-top: 5px;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.modal-footer .btn {
  padding: 8px 20px;
  font-size: 14px;
}
</style>

