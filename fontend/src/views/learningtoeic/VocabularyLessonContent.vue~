<template>
  <div class="d-flex flex-column min-vh-100">
    <AppHeader></AppHeader>
    <main class="flex-grow-1 container mt-5">
      <!-- Tiêu đề trang -->
      <div class="text-center mb-4">
        <h3 class="page-header text-primary fw-bold">Học Từ Vựng</h3>
        <p class="text-muted">Danh sách các bài học từ vựng, hãy bắt đầu học nào!</p>
      </div>

      <!-- Thông báo lỗi -->
      <div v-if="errorMessage" class="alert alert-danger text-center mt-3">
        {{ errorMessage }}
      </div>

      <!-- Danh sách từ vựng -->
      <div v-if="lessonDetails.length" class="vocab-container">
        <div
            v-for="(vocab, index) in lessonDetails"
            :key="vocab.vocabularylessoncontentid"
            class="vocab-card"
        >
          <div class="card shadow-sm h-100">
            <div class="card-body text-center">
              <h5 class="card-title text-primary fw-bold">
                {{ index + 1 }}. {{ vocab.vocabularylessoncontentdescript }}
              </h5>
              <!-- Hình ảnh -->
              <div class="text-center mb-3">
                <img
                    :src="`${baseUrl}${vocab.vocabularylessoncontentimage}`"
                    alt="Vocabulary Image"
                    class="img-fluid rounded vocab-img"
                />
              </div>
              <!-- Audio -->
              <div class="text-center mb-3">
                <audio
                    :src="`${baseUrl}${vocab.vocabularylessoncontentaudio}`"
                    controls
                ></audio>
              </div>
              <!-- Nội dung từ vựng -->
              <p class="text-muted">
                <strong>Nghĩa:</strong>
                <span>{{ vocab.vocabularylessoncontentmeaning }}</span>
              </p>
              <p>
                <strong>Câu ví dụ:</strong>
                {{ vocab.vocabularylessoncontentsentence }}
              </p>
              <p>
                <strong>Phiên âm:</strong>
                <em>{{ vocab.vocabularylessoncontenttranscript }}</em>
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Phần tạo bình luận -->
      <div class="mt-5">
        <h4 class="text-primary">Bình luận</h4>
        <div class="form-group mb-3">
          <textarea
              v-model="newComment"
              class="form-control"
              rows="3"
              placeholder="Viết bình luận của bạn tại đây..."
          ></textarea>
        </div>
        <button @click="submitComment" class="btn btn-primary">
          Gửi bình luận
        </button>
      </div>

      <!-- Danh sách bình luận -->
      <div class="mt-4">
        <h5 class="text-secondary">Danh sách bình luận:</h5>
        <div v-if="comments.length" class="list-group">
          <div
              v-for="comment in comments"
              :key="comment.commentvocabularyid"
              class="list-group-item"
          >
            <strong>{{ comment.name }}</strong>
            <p>{{ comment.commentgrammarcontent }}</p>
            <small class="text-muted">{{ comment.commentvocabularytime }}</small>
          </div>
        </div>
        <p v-else class="text-muted">Chưa có bình luận nào.</p>
      </div>
    </main>
    <FooterPage></FooterPage>
  </div>
</template>
<script setup>
import { ref, onMounted } from "vue";
import { useRoute } from "vue-router";
import axios from "axios";
import AppHeader from "@/components/Header.vue";
import FooterPage from "@/components/FooterPage.vue";

// Base URL for API resources
const baseUrl = "http://localhost:8080"; // Update if needed

// Get lesson ID from URL
const route = useRoute();
const vocabularyid = route.params.id;

// State variables
const lessonDetails = ref([]);
const comments = ref([]);
const newComment = ref("");
const errorMessage = ref("");
const usertoeic = JSON.parse(localStorage.getItem('usertoeic'));

// Load lesson details
const loadLessonDetails = async () => {
  try {
    const { data } = await axios.get(
        `${baseUrl}/api/admin/vocab/loadLessonVocab/${vocabularyid}`
    );
    lessonDetails.value = data;
  } catch (error) {
    console.error("Error loading lesson details:", error);
    errorMessage.value = "Cannot load lesson details. Please try again later.";
  }
};

// Load comments
const loadComments = async () => {
  try {
    const { data } = await axios.get(`${baseUrl}/api/admin/vocab/loadCommentVocab/${vocabularyid}`);
    comments.value = data;
  } catch (error) {
    console.error("Error loading comments:", error);
    errorMessage.value = "Cannot load comments. Please try again later.";
  }
};

// Submit new comment
const submitComment = async () => {
  if (!newComment.value.trim()) {
    alert("Comment cannot be empty.");
    return;
  }

  try {
    const payload = new URLSearchParams();
    payload.append("vocabularyid", vocabularyid);
    payload.append("id", usertoeic.id);
    payload.append("commentvocabularycontent", newComment.value.trim());
    console.log(payload);
    await axios.post(`${baseUrl}/api/admin/vocab/createCommentVocabulary`, payload, {
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
    });
    newComment.value = ""; // Reset comment input
    loadComments(); // Reload comments
  } catch (error) {
    console.error("Error submitting comment:", error);
    alert("Failed to submit comment. Please try again later.");
  }
};

// Fetch data on component mount
onMounted(() => {
  loadLessonDetails();
  loadComments();
});
</script>
<style scoped>
.container {
  max-width: 1000px;
  margin: auto;
}

/* Vocabulary container */
.vocab-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  gap: 20px;
}

/* Vocabulary card */
.vocab-card {
  flex: 0 0 calc(50% - 10px);
  max-width: calc(50% - 10px);
  display: flex;
  justify-content: center;
}

.card {
  width: 100%;
  max-width: 400px;
  height: 500px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border-radius: 10px;
  border: none;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  transition: transform 0.2s ease-in-out, box-shadow 0.3s ease-in-out;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
}

.card-title {
  font-size: 20px;
  margin-bottom: 15px;
}

.vocab-img {
  width: 100%;
  height: 200px;
  object-fit: cover;
  border-radius: 8px;
}

.card-body p {
  font-size: 16px;
  margin-bottom: 10px;
}

.card-body span {
  font-weight: bold;
  color: #495057;
  display: block;
  white-space: pre-wrap;
}

textarea {
  resize: none;
}

.list-group-item {
  margin-bottom: 15px;
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 15px;
  background-color: #f9f9f9;
}

.list-group-item strong {
  color: #007bff;
}

.list-group-item p {
  margin: 5px 0;
}

.list-group-item small {
  font-size: 12px;
  color: #6c757d;
}
</style>
